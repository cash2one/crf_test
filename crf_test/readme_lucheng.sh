本文档主要对韵律模型训练流程进行简单说明


第一步:处理语料

在该步骤,需要提供手工标注的韵律训练语料,并按照统一的格式存储在train_corpus.txt中。具体格式样例如下：

姜 还是 老的辣$一位 教|社会学的 老师$打了 个|幽默的 比喻 说
一千|四百 二十一 语丝$不惜|牺牲 自由$以图 苟安的 人
魏格登 先生$每听到|前门的 小铃$发出|轻微的|叮当声

其中，空格表示韵律词结尾，|符号表示次韵律短语结尾（二级韵律短语结尾），
    $符号表示主韵律短语结尾（一级韵律短语结尾）。句尾不需要标记，直接回车。
特别注意，该语料不能有多余的空格。
此外，除了上述符号及相应的汉字文本外，不能包含其它符号（标点符号已经过滤，所有阿拉伯数字、特殊符号已经经过正则化处理）。

除了上述文本语料外，另需准备train_corpus_tagged.txt文件，
    按照与train_corpus.txt逐行对应的方式存储相应训练语料的分词、词性标注结果。
该分词过程可以采用任意分词工具，词性标注符号也没有限制。只是要注意训练过程采用的工具及使用过程采用的工具要统一。

准备好上述工具后，依照顺序分别执行step1.py至step4.py
    （需要采用python3.2以上版本，本人在windows下测试通过）。
执行完毕后，即可生成三个训练文件：pw_train.txt，pp_train.txt，ip_train.txt，用于训练crf模型。
其中pw,pp,ip分别对应韵律词、二级韵律短语、一级韵律短语


第二步：模型训练

首先安装crfpp工具(linux环境下)。
安装完毕后，新建训练文件夹，并将训练语料pw_train.txt，pp_train.txt，ip_train.txt拷入该文件夹。
同时，将“第二步_训练模型”文件夹下的模板“template_pp”及“template_pp”也拷入该文件夹。执行如下过程

LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH  
export LD_LIBRARY_PATH
./crf_learn -c 4.0 -f 5 -t template_pw pw_train.txt model_pw
./crf_learn -c 4.0 -f 5 -t template_pp pp_train.txt model_pp
./crf_learn -c 4.0 -f 3 -t template_pp ip_train.txt model_ip

其中，pp及ip的训练过程采用同一个模板文件。
训练完成后，会生成相应的模型文件。
我们须保留相应的文本格式版本，分别命名为model_pw.txt，model_pp.txt，model_ip.txt，该文件经过后续格式处理后，即可在引擎中使用。


第三步：模型后处理
上述过程生成的文件格式存在冗余，我们消除冗余后，按照自定义的方式进行存储，即可在引擎中使用。
该过程采用postprocess.py工具。我们可以看到model_pw.txt，model_pp.txt，model_ip.txt三个文件大体格式分为如下部分：

version: 100
cost-factor: 1
maxid: 42044
xsize: 5

0
1

U00:%x[-2,0]
U01:%x[-1,0]
........

0 U00:_B-1
2 U00:_B-2
4 U00:啊
6 U00:阿
........

0.1846607464257579
-0.1846607464258724
0.2134598654958623
-0.2134598654960214
..............

我们手工的把上述文件拆成两部分，分别对应temp1.txt和temp2.txt。
其中，temp1.txt对应如下部分：
0 U00:_B-1
2 U00:_B-2
4 U00:啊
6 U00:阿
........

temp2.txt对应如下部分：
0.1846607464257579
-0.1846607464258724
0.2134598654958623
-0.2134598654960214
..............

即，temp1.txt对应所有的特征信息，temp2.txt对应相应的特征权重。
此时，执行postprocess.py，即可生成generated_model.txt，该模型就是当前引擎支持的模型结构，修改文件名后即可在引擎中使用。






